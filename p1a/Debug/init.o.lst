   1              	# 1 "../init.asm"
   1              	
   0              	
   0              	
   0              	
   2              	    .extern main
   3              	    .equ STACK, 0x0c7ff000
   4              	.text
   5              	.equ	num, 10  /* this is used to indicate the number of words to copy */
   6              	#        ENTRY            		/*  mark the first instruction to call */
   7              	.arm /*indicates that we are using the ARM instruction set */
   8              	#------standard initial code
   9              	# --- Setup interrupt / exception vectors
  10              	.global	start
  11              	start:
  12 0000 FFFFFFEA 	      B       Reset_Handler
  13              	/* In this version we do not use the following handlers */
  14              	###################################################################################################
  15              	#-----------Undefined_Handler:
  16              	#      B       Undefined_Handler
  17              	#----------SWI_Handler:
  18              	#      B       SWI_Handler
  19              	#----------Prefetch_Handler:
  20              	#      B       Prefetch_Handler
  21              	#----------Abort_Handler:
  22              	#      B       Abort_Handler
  23              	#         NOP      /* Reserved vector */
  24              	#----------IRQ_Handler:
  25              	#      B       IRQ_Handler
  26              	#----------FIQ_Handler:
  27              	#      B       FIQ_Handler
  28              	###################################################################################################
  29              	# Reset Handler:
  30              	# the processor starts executing this code after system reset
  31              	###################################################################################################
  32              	Reset_Handler:
  33              	#
  34 0004 64D09FE5 	        ldr		 sp,=STACK      /*  set up stack pointer (r13) */
  35              	# colocamos los parámetros para la llamada a la primera función
  36 0008 64009FE5 	        LDR     r0, =scr        /*  r0 = pointer to source block */
  37              	 # guardamos r0 en r4 porque al llamar a las funciones podemos perder su valor. Así lo podremos res
  38 000c 0040A0E1 	        MOV 	r4, r0
  39 0010 60109FE5 	        LDR     r1, =dst1       /*  r1 = pointer to destination block 1 */
  40              	
  41              	#
  42              	# PART 1: USING ARM CODE
  43              	#
  44              	       	//BL		ARM_copy_10			/*FUNCTION CALL*/
  45              	#
  46              	# PART 2: USING THUMB CODE
  47              	#
  48              	# colocamos los parámetros para la llamada a la segunda función porque ARM_copy_10 los ha podido el
  49              	# IMPORTANTE: si queremos tener un código modular debemos volver a poner los parámetros a pesar de 
  50 0014 0400A0E1 	        MOV     r0, r4       /*  r0 = pointer to source block */
  51 0018 5C109FE5 	        LDR     r1, =dst2       /*  r1 = pointer to destination block 1 */
  52 001c 39308FE2 	     	ADR		r3, th_copy_10+1 /* the last address bit is not really used to specify the address but t
  53 0020 00E08FE2 			adr		r14,return		/* we store the return address in r14*/
  54 0024 13FF2FE1 			BX		r3				/* FUNCTION CALL, we jump to th_mul. +1 indicates that we want to switch to thumb */
  55              	return:
  56              	#
  57              	# PART 3: USING A .C FUNCTION
  58              	#
  59              	# ponemos los parámetros de nuevo
  60 0028 0400A0E1 			MOV     r0, r4        /*  r0 = pointer to source block */
  61 002c 4C109FE5 			LDR     r1, =dst3        /*  r1 = pointer to destination block 1 */
  62              	# function __c_copy is in copy.c
  63              	.extern     __c_copy_10
  64 0030 4C309FE5 	        ldr         r3, = __c_copy_10
  65 0034 0FE0A0E1 	        mov         lr, pc
  66              	# FUNCTION CALL the parameters are stored in r0 and r1
  67              	# If there are 4 or less parameters when calling a C function the compiler assumes that they have
  68              	# been stored in r0-r3. If there are more parameters you have to store them in the data stack using
  69 0038 13FF2FE1 			bx          r3
  70              	stop:
  71 003c FEFFFFEA 	 		B     	stop    	/*  end of program */
  72              	###################################################################################################
  73              	# Función ARM: copia 10 palabras de la dirección indicada en r0 a la indicada por r1
  74              	# debería crear un marco de pila con la misma estructura que en el resto de llamadas a funciones
  75              	# pero como es un nodo hoja (no llama a ninguna función) vamos a hacer un marco simplificado: sólo 
  76              	# registros que utiliza y que no tiene permiso para alterar.
  77              	
  78              	###################################################################################################
  79              	ARM_copy_10:
  80              	        #  saves the working registers
  81              	        # Recordad que puede modificar r0, r1, r2 y r3 sin guardarlos previamente.
  82 0040 F00F2DE9 	        STMFD   sp!, {r4-r11}
  83              			# Poned el código aquí: sólo hacen falta dos instrucciones
  84              	salto:
  85 0044 045090E4 			ldr r5,[r0],#4
  86 0048 045081E4 			STR r5,[r1],#4
  87 004c 0A0055E3 			CMP r5,#10
  88 0050 FBFFFF1A 			BNE salto
  89              			# restore the original registers
  90 0054 F00FBDE8 	        LDMFD   sp!, {r4-r11}
  91              	        #return to the instruccion that called the rutine and to arm mode
  92 0058 1EFF2FE1 	        bx 	r14
  93              	###################################################################################################
  94              	# Función thumb: copia 10 palabras de la dirección indicada en r0 a la indicada por r1
  95              	# De nuevo, al ser un nodo hoja hacemos un marco simplificado: sólo los registros que toca y debe r
  96              	###################################################################################################
  97              	/*indicates that we are using the thumb instruction set */
  98              	.thumb
  99              	th_copy_10:
 100 005c F0B4     			push	{r4-r7}
 101              			# poned aquí el código, como no podemos leer y escribir 10 palabras de golpe lo haremos en dos ve
 102              	
 103              	saltot:
 104 005e 0568     			LDR r5,[r0]
 105 0060 0D60     			STR r5,[r1]
 106 0062 0430     			ADD r0,#4
 107 0064 0431     			ADD r1,#4
 108 0066 0A2D     			CMP r5,#10
 109 0068 F9D1     			BNE saltot
 110 006a F0BC     			pop		{r4-r7} /*restores the registers*/
 111 006c 7047     		    bx		r14	/* this is the return instrucction*/
 112              	
 113              	###################################################################################################
 114              	#        AREA BlockData, DATA, READWRITE
 115              	#	scr: source block (10 words)
 116              	#	dst1: destination block 1 (10 words)
 117              	#	dst2: destination block 2 (10 words)
 118              	#	dst3: destination block 3 (10 words)
 119              	###################################################################################################
 120 006e 0000     	.data
 121              	.ltorg /*guarantees the alignment*/
 122              	scr:
 123 0000 01000000 	     .long     1,2,3,4,5,6,7,8,9,10
 123      02000000 
 123      03000000 
 123      04000000 
 123      05000000 
 124              	dst1:
 125 0028 00000000 	     .long     0,0,0,0,0,0,0,0,0,0
 125      00000000 
 125      00000000 
 125      00000000 
 125      00000000 
 126              	dst2:
 127 0050 00000000 	     .long     0,0,0,0,0,0,0,0,0,0
 127      00000000 
 127      00000000 
 127      00000000 
 127      00000000 
 128              	dst3:
 129 0078 00000000 		 .long	   0,0,0,0,0,0,0,0,0,0
 129      00000000 
 129      00000000 
 129      00000000 
 129      00000000 
 130              	.end
DEFINED SYMBOLS
         ../init.asm:3      *ABS*:0c7ff000 STACK
         ../init.asm:5      *ABS*:0000000a num
         ../init.asm:11     .text:00000000 start
         ../init.asm:32     .text:00000004 Reset_Handler
         ../init.asm:12     .text:00000000 $a
         ../init.asm:122    .data:00000000 scr
         ../init.asm:124    .data:00000028 dst1
         ../init.asm:126    .data:00000050 dst2
         ../init.asm:99     .text:0000005c th_copy_10
         ../init.asm:55     .text:00000028 return
         ../init.asm:128    .data:00000078 dst3
         ../init.asm:70     .text:0000003c stop
         ../init.asm:79     .text:00000040 ARM_copy_10
         ../init.asm:84     .text:00000044 salto
         ../init.asm:100    .text:0000005c $t
         ../init.asm:103    .text:0000005e saltot
         ../init.asm:120    .text:0000006e $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
__c_copy_10
