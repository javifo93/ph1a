
p1a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  0c0000f8  0c0000f8  000080f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_abbrev 00000073  00000000  00000000  00008198  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c5  00000000  00000000  0000820b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   000000ab  00000000  00000000  000082d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_macinfo 000020fc  00000000  00000000  0000837b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    0000002c  00000000  00000000  0000a477  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000022  00000000  00000000  0000a4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  0000a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000043  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      0000002a  00000000  00000000  0000a54b  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 00000030  00000000  00000000  0000a575  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000030  00000000  00000000  0000a5a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000000 <__c_copy_10>:
// This function copies 10 words from one address to another
// orig: pointer to the source block 
// dest: pointer to the destination block
//------------------------------------------------------------------------------------------------ 
void __c_copy_10(int *orig, int *dest)
{ 
 c000000:	e1a0c00d 	mov	ip, sp
 c000004:	e92dd800 	push	{fp, ip, lr, pc}
 c000008:	e24cb004 	sub	fp, ip, #4
 c00000c:	e24dd010 	sub	sp, sp, #16
 c000010:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000014:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 int i; 
 for(i=0;i<10;i++)
 c000018:	e3a03000 	mov	r3, #0
 c00001c:	e50b3010 	str	r3, [fp, #-16]
 c000020:	ea00000c 	b	c000058 <__c_copy_10+0x58>
 { 
      	dest[i]=orig[i];
 c000024:	e51b3010 	ldr	r3, [fp, #-16]
 c000028:	e1a03103 	lsl	r3, r3, #2
 c00002c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c000030:	e0823003 	add	r3, r2, r3
 c000034:	e51b2010 	ldr	r2, [fp, #-16]
 c000038:	e1a02102 	lsl	r2, r2, #2
 c00003c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c000040:	e0812002 	add	r2, r1, r2
 c000044:	e5922000 	ldr	r2, [r2]
 c000048:	e5832000 	str	r2, [r3]
// dest: pointer to the destination block
//------------------------------------------------------------------------------------------------ 
void __c_copy_10(int *orig, int *dest)
{ 
 int i; 
 for(i=0;i<10;i++)
 c00004c:	e51b3010 	ldr	r3, [fp, #-16]
 c000050:	e2833001 	add	r3, r3, #1
 c000054:	e50b3010 	str	r3, [fp, #-16]
 c000058:	e51b3010 	ldr	r3, [fp, #-16]
 c00005c:	e3530009 	cmp	r3, #9
 c000060:	daffffef 	ble	c000024 <__c_copy_10+0x24>
 { 
      	dest[i]=orig[i];
    } 
} 
 c000064:	e24bd00c 	sub	sp, fp, #12
 c000068:	e89d6800 	ldm	sp, {fp, sp, lr}
 c00006c:	e12fff1e 	bx	lr

0c000070 <start>:
.arm /*indicates that we are using the ARM instruction set */
#------standard initial code
# --- Setup interrupt / exception vectors
.global	start
start:
      B       Reset_Handler
 c000070:	eaffffff 	b	c000074 <Reset_Handler>

0c000074 <Reset_Handler>:
# Reset Handler:
# the processor starts executing this code after system reset
#######################################################################################################
Reset_Handler:
#
        ldr		 sp,=STACK      /*  set up stack pointer (r13) */
 c000074:	e59fd064 	ldr	sp, [pc, #100]	; c0000e0 <saltot+0x12>
# colocamos los parámetros para la llamada a la primera función
        LDR     r0, =scr        /*  r0 = pointer to source block */
 c000078:	e59f0064 	ldr	r0, [pc, #100]	; c0000e4 <saltot+0x16>
 # guardamos r0 en r4 porque al llamar a las funciones podemos perder su valor. Así lo podremos restaurar sin acceder a memoria
        MOV 	r4, r0
 c00007c:	e1a04000 	mov	r4, r0
        LDR     r1, =dst1       /*  r1 = pointer to destination block 1 */
 c000080:	e59f1060 	ldr	r1, [pc, #96]	; c0000e8 <saltot+0x1a>
#
# PART 2: USING THUMB CODE
#
# colocamos los parámetros para la llamada a la segunda función porque ARM_copy_10 los ha podido eliminar
# IMPORTANTE: si queremos tener un código modular debemos volver a poner los parámetros a pesar de que en teoría el 1 y el 2
        MOV     r0, r4       /*  r0 = pointer to source block */
 c000084:	e1a00004 	mov	r0, r4
        LDR     r1, =dst2       /*  r1 = pointer to destination block 1 */
 c000088:	e59f105c 	ldr	r1, [pc, #92]	; c0000ec <saltot+0x1e>
     	ADR		r3, th_copy_10+1 /* the last address bit is not really used to specify the address but to select between ARM and Thumb code */
 c00008c:	e28f3039 	add	r3, pc, #57	; 0x39
		adr		r14,return		/* we store the return address in r14*/
 c000090:	e28fe000 	add	lr, pc, #0
		BX		r3				/* FUNCTION CALL, we jump to th_mul. +1 indicates that we want to switch to thumb */
 c000094:	e12fff13 	bx	r3

0c000098 <return>:
return:
#
# PART 3: USING A .C FUNCTION
#
# ponemos los parámetros de nuevo
		MOV     r0, r4        /*  r0 = pointer to source block */
 c000098:	e1a00004 	mov	r0, r4
		LDR     r1, =dst3        /*  r1 = pointer to destination block 1 */
 c00009c:	e59f104c 	ldr	r1, [pc, #76]	; c0000f0 <saltot+0x22>
# function __c_copy is in copy.c
.extern     __c_copy_10
        ldr         r3, = __c_copy_10
 c0000a0:	e59f304c 	ldr	r3, [pc, #76]	; c0000f4 <saltot+0x26>
        mov         lr, pc
 c0000a4:	e1a0e00f 	mov	lr, pc
# FUNCTION CALL the parameters are stored in r0 and r1
# If there are 4 or less parameters when calling a C function the compiler assumes that they have
# been stored in r0-r3. If there are more parameters you have to store them in the data stack using the stack pointer
		bx          r3
 c0000a8:	e12fff13 	bx	r3

0c0000ac <stop>:
stop:
 		B     	stop    	/*  end of program */
 c0000ac:	eafffffe 	b	c0000ac <stop>

0c0000b0 <ARM_copy_10>:

#######################################################################################################
ARM_copy_10:
        #  saves the working registers
        # Recordad que puede modificar r0, r1, r2 y r3 sin guardarlos previamente.
        STMFD   sp!, {r4-r11}
 c0000b0:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}

0c0000b4 <salto>:
		# Poned el código aquí: sólo hacen falta dos instrucciones
salto:
		ldr r5,[r0],#4
 c0000b4:	e4905004 	ldr	r5, [r0], #4
		STR r5,[r1],#4
 c0000b8:	e4815004 	str	r5, [r1], #4
		CMP r5,#10
 c0000bc:	e355000a 	cmp	r5, #10
		BNE salto
 c0000c0:	1afffffb 	bne	c0000b4 <salto>
		# restore the original registers
        LDMFD   sp!, {r4-r11}
 c0000c4:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
        #return to the instruccion that called the rutine and to arm mode
        bx 	r14
 c0000c8:	e12fff1e 	bx	lr

0c0000cc <th_copy_10>:
# De nuevo, al ser un nodo hoja hacemos un marco simplificado: sólo los registros que toca y debe restaurar
#######################################################################################################
/*indicates that we are using the thumb instruction set */
.thumb
th_copy_10:
		push	{r4-r7}
 c0000cc:	b4f0      	push	{r4, r5, r6, r7}

0c0000ce <saltot>:
		# poned aquí el código, como no podemos leer y escribir 10 palabras de golpe lo haremos en dos veces.

saltot:
		LDR r5,[r0]
 c0000ce:	6805      	ldr	r5, [r0, #0]
		STR r5,[r1]
 c0000d0:	600d      	str	r5, [r1, #0]
		ADD r0,#4
 c0000d2:	3004      	adds	r0, #4
		ADD r1,#4
 c0000d4:	3104      	adds	r1, #4
		CMP r5,#10
 c0000d6:	2d0a      	cmp	r5, #10
		BNE saltot
 c0000d8:	d1f9      	bne.n	c0000ce <saltot>
		pop		{r4-r7} /*restores the registers*/
 c0000da:	bcf0      	pop	{r4, r5, r6, r7}
	    bx		r14	/* this is the return instrucction*/
 c0000dc:	4770      	bx	lr
 c0000de:	0000      	.short	0x0000
 c0000e0:	0c7ff000 	.word	0x0c7ff000
 c0000e4:	0c0000f8 	.word	0x0c0000f8
 c0000e8:	0c000120 	.word	0x0c000120
 c0000ec:	0c000148 	.word	0x0c000148
 c0000f0:	0c000170 	.word	0x0c000170
 c0000f4:	0c000000 	.word	0x0c000000
